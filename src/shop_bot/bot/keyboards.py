from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

main_reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True
)

def create_main_menu_keyboard(user_keys: list, trial_available: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    if trial_available:
        builder.button(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (3 –¥–Ω—è)", callback_data="get_trial")

    builder.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")
    builder.button(text=f"üîë –ú–æ–∏ –∫–ª—é—á–∏ ({len(user_keys)})", callback_data="manage_keys")
    builder.button(text="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="show_referral_program")
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="show_help")
    builder.button(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="show_about")

    layout = [1 if trial_available else 0, 2, 1, 2]
    actual_layout = [size for size in layout if size > 0]
    builder.adjust(*actual_layout)
    
    return builder.as_markup()

def create_about_keyboard(channel_url: str | None, terms_url: str | None, privacy_url: str | None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if channel_url:
        builder.button(text="üì∞ –ù–∞—à –∫–∞–Ω–∞–ª", url=channel_url)
    if terms_url:
        builder.button(text="üìÑ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", url=terms_url)
    if privacy_url:
        builder.button(text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=privacy_url)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()
    
def create_support_keyboard(support_user: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if support_user:
        # –ï—Å–ª–∏ support_user –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http, –¥–æ–±–∞–≤–ª—è–µ–º t.me/
        if not support_user.startswith('http'):
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º t.me/
            username = support_user.lstrip('@')
            support_url = f"https://t.me/{username}"
        else:
            support_url = support_user
        builder.button(text="üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=support_url)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_host_selection_keyboard(hosts: list, action: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for host in hosts:
        callback_data = f"select_host_{action}_{host['host_name']}"
        builder.button(text=host['host_name'], callback_data=callback_data)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_keys" if action == 'new' else "back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_plans_keyboard(plans: list[dict], action: str, host_name: str, key_id: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for plan in plans:
        callback_data = f"buy_{host_name}_{plan['plan_id']}_{action}_{key_id}"
        builder.button(text=f"{plan['plan_name']} - {plan['price']:.0f} RUB", callback_data=callback_data)
    back_callback = "manage_keys" if action == "extend" else "buy_new_key"
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
    builder.adjust(1) 
    return builder.as_markup()

def create_skip_email_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ—á—Ç—ã", callback_data="skip_email")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="back_to_plans")
    builder.adjust(1)
    return builder.as_markup()

def create_payment_method_keyboard(payment_methods: dict, action: str, key_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    if payment_methods and payment_methods.get("yookassa"):
        builder.button(text="üè¶ –°–ë–ü / –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="pay_yookassa")
    if payment_methods and payment_methods.get("cryptobot"):
        builder.button(text="üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="pay_heleket")
    if payment_methods and payment_methods.get("cryptobot"):
        builder.button(text="ü§ñ CryptoBot", callback_data="pay_cryptobot")
    #if payment_methods and payment_methods.get("tonconnect"):
    #    builder.button(text="ü™ô TON Connect", callback_data="pay_tonconnect")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_email_prompt")
    builder.adjust(1)
    return builder.as_markup()

def create_payment_keyboard(payment_url: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
    return builder.as_markup()

def create_keys_management_keyboard(keys: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if keys:
        for i, key in enumerate(keys):
            expiry_date = datetime.fromisoformat(key['expiry_date'])
            status_icon = "‚úÖ" if expiry_date > datetime.now() else "‚ùå"
            host_name = key.get('host_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç')
            button_text = f"{status_icon} –ö–ª—é—á #{i+1} ({host_name}) (–¥–æ {expiry_date.strftime('%d.%m.%Y')})"
            builder.button(text=button_text, callback_data=f"show_key_{key['key_id']}")
    builder.button(text="‚ûï –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data="buy_new_key")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_key_info_keyboard(key_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á", callback_data=f"extend_key_{key_id}")
    builder.button(text="üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥", callback_data=f"show_qr_{key_id}")
    builder.button(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"show_instruction_{key_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="manage_keys")
    builder.adjust(1)
    return builder.as_markup()

def create_back_to_key_keyboard(key_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª—é—á—É", callback_data=f"show_key_{key_id}")
    return builder.as_markup()

def create_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    return builder.as_markup()

def create_welcome_keyboard(channel_url: str | None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if channel_url:
        builder.button(text="‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)
    builder.button(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è / –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="check_subscription_and_agree")
    builder.adjust(1)
    return builder.as_markup()